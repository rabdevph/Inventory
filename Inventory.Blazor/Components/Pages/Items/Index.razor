@page "/items"
@rendermode InteractiveServer
@using System.Text.Json
@using Inventory.Shared.Dtos.Items
@using Inventory.Shared.Dtos.Common
@implements IDisposable

<PageTitle>Items - Inventory Management</PageTitle>

<!-- Fixed Header Section -->
<div class="flex items-center justify-between mb-6">
    <div>
        <h1 class="text-2xl font-bold text-gray-900">Inventory Items</h1>
        <p class="text-gray-600">Manage and track your inventory items</p>
    </div>
    <a href="/items/create"
        class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center shadow-sm">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        Add New Item
    </a>
</div>

<!-- Fixed Search and Filter Section -->
<div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
    <div class="p-4">
        <!-- Search Bar -->
        <div class="mb-4">
            <input type="text" placeholder="Search items by name..." @bind="SearchTerm" @bind:event="oninput"
                class="w-full px-3 py-2 text-sm border border-gray-300 rounded-lg bg-white hover:border-gray-400 transition-colors shadow-sm" />
        </div>

        <!-- Filter Sections -->
        <div class="flex flex-col sm:flex-row gap-6">
            <!-- Status Filter Section -->
            <div class="flex-1">
                <div class="flex items-center gap-3">
                    <label class="text-sm font-medium text-gray-700 whitespace-nowrap">Status:</label>
                    <div class="flex gap-2">
                        <button @onclick="() => SetStatusFilter(null)"
                            class="@GetStatusButtonClass(null) px-2 py-1 text-sm rounded-md border transition-colors">
                            All
                        </button>
                        <button @onclick="() => SetStatusFilter(true)"
                            class="@GetStatusButtonClass(true) px-2 py-1 text-sm rounded-md border transition-colors">
                            Active
                        </button>
                        <button @onclick="() => SetStatusFilter(false)"
                            class="@GetStatusButtonClass(false) px-2 py-1 text-sm rounded-md border transition-colors">
                            Inactive
                        </button>
                    </div>
                </div>
            </div>

            <!-- Stock Status Filter Section -->
            <div class="flex-1">
                <div class="flex items-center gap-3">
                    <label class="text-sm font-medium text-gray-700 whitespace-nowrap">Stock:</label>
                    <div class="flex gap-2">
                        <button @onclick="() => SetStockFilter(null)"
                            class="@GetStockButtonClass(null) px-2 py-1 text-sm rounded-md border transition-colors">
                            All
                        </button>
                        <button @onclick="() => SetStockFilter(true)"
                            class="@GetStockButtonClass(true) px-2 py-1 text-sm rounded-md border transition-colors">
                            In Stock
                        </button>
                        <button @onclick="() => SetStockFilter(false)"
                            class="@GetStockButtonClass(false) px-2 py-1 text-sm rounded-md border transition-colors">
                            Out of Stock
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Scrollable Items Content -->
<div class="bg-white rounded-lg shadow-sm border border-gray-200 flex flex-col" style="height: calc(100vh - 280px);">
    @if (isLoading)
    {
        <div class="p-8 text-center">
            <p class="text-gray-600">Loading items...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="p-8 text-center">
            <p class="text-red-600">@errorMessage</p>
            <button @onclick="() => LoadItems()" class="mt-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                Retry
            </button>
        </div>
    }
    else
    {
        @if (pagedResult == null || !pagedResult.Items.Any())
        {
            <div class="p-8 text-center">
                <h3 class="text-lg font-medium text-gray-900">No items found</h3>
                <p class="mt-2 text-gray-600">
                    @if (pagedResult?.TotalCount == 0)
                    {
                        <span>No items match your current filters. Try adjusting your search criteria.</span>
                    }
                    else
                    {
                        <span>No items available in the inventory.</span>
                    }
                </p>
            </div>
        }
        else
        {
            <div class="overflow-auto flex-1">
                <table class="w-full">
                    <thead class="bg-gray-50 sticky top-0">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created
                            </th>
                            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var item in pagedResult.Items)
                        {
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900">@item.Name</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="@GetTailwindClass(item.StockLevelClass)">
                                        @item.StockStatus
                                        @if (item.IsLowStock)
                                        {
                                            <span class="ml-1 text-xs">(Low Stock)</span>
                                        }
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="@(item.IsActive ? "text-green-600" : "text-red-600")">
                                        @item.StatusIcon @(item.IsActive ? "Active" : "Inactive")
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @GetLocalTime(item.CreatedAt).ToString("MM/dd/yyyy")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                    <div class="flex items-center justify-end gap-2">
                                        <a href="/items/@item.Id" class="text-blue-600 hover:text-blue-900">View</a>
                                        <span class="text-gray-300">|</span>
                                        <a href="/items/@item.Id/edit" class="text-green-600 hover:text-green-900">Edit</a>
                                        <span class="text-gray-300">|</span>
                                        @if (item.IsActive)
                                        {
                                            <button @onclick="() => DeactivateItem(item.Id)"
                                                class="text-red-600 hover:text-red-900 hover:underline">
                                                Deactivate
                                            </button>
                                        }
                                        else
                                        {
                                            <button @onclick="() => ActivateItem(item.Id)"
                                                class="text-green-600 hover:text-green-900 hover:underline">
                                                Activate
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="p-4 border-t border-gray-200 bg-gray-50 flex justify-between items-center">
                <p class="text-sm text-gray-600">
                    @if (pagedResult != null)
                    {
                        <span>@pagedResult.DisplayText</span>
                    }
                </p>

                <!-- Pagination Controls -->
                @if (pagedResult != null && pagedResult.TotalPages > 1)
                {
                    <div class="flex items-center gap-1">
                        <!-- Previous Button -->
                        <button @onclick="() => LoadItems(currentPage - 1)" disabled="@(!pagedResult.HasPreviousPage)"
                            class="px-3 py-1 text-sm bg-white border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                            Previous
                        </button>

                        <!-- Page Numbers -->
                        @foreach (var page in GetPageNumbers())
                        {
                            @if (page == -1)
                            {
                                <span class="px-3 py-1 text-sm text-gray-500">...</span>
                            }
                            else
                            {
                                <button @onclick="() => LoadItems(page)" class="@GetPageButtonClass(page)">
                                    @((MarkupString)page.ToString())
                                </button>
                            }
                        }

                        <!-- Next Button -->
                        <button @onclick="() => LoadItems(currentPage + 1)" disabled="@(!pagedResult.HasNextPage)"
                            class="px-3 py-1 text-sm bg-white border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                            Next
                        </button>
                    </div>
                }
            </div>
        }
    }
</div>
